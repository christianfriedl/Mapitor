/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * create a widget out of a node object
 */

"use strict";

var m_node = require('node/node.js');
var m_textNode = require('node/textNode.js');
var m_area = require('node/area.js');
var m_arrow = require('node/arrow.js');

var m_nodeWidget = require('widget/nodeWidget.js');
var m_textNodeWidget = require('widget/textNodeWidget.js');
var m_arrowWidget = require('widget/arrowWidget.js');
var m_areaWidget = require('widget/areaWidget.js');
var m_map = require('map.js');

function WidgetFactory(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map: ' + PARAM); } 
        /* @DEVELOPMENT } */

        this._map = p_map;
    }
}

function widgetFactory(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map: ' + PARAM); } 
        /* @DEVELOPMENT } */
        return new WidgetFactory(p_map);
    } else {
        return new WidgetFactory();
    }
}

WidgetFactory.prototype.constructor = WidgetFactory;

WidgetFactory.prototype.forObject = function(/* object */ p_object, /* { several widget options } */ p_options) {
    /* @DEVELOPMENT { */
        var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
    /* @DEVELOPMENT } */

    if ( p_object instanceof m_textNode.TextNode ) {
        return m_textNodeWidget.textNodeWidget(p_object, p_options);
    } else if ( p_object instanceof m_arrow.Arrow ) {
        return m_arrowWidget.arrowWidget(p_object, p_options);
    } else if ( p_object instanceof m_area.Area ) {
        return m_areaWidget.areaWidget(p_object, p_options);
    } else {
        throw new Error('no widget class found for object ' + p_object);
    }
};

exports.WidgetFactory = WidgetFactory;
exports.widgetFactory = widgetFactory;
