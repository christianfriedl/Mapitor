/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * frontend widget for basic node
 */

"use strict";

var m_node = require('node/node.js');

var currentWidgetId = 0;

function NodeWidget(/* m_node.Node */ p_model, /* { int x, int y} */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_model; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_model: ' + PARAM); } 
        /* @DEVELOMPENT } */

        this._id = ++currentWidgetId;
        this._model = p_model;
        this._x = p_options.x;
        this._y = p_options.y;
    }
}

function nodeWidget(/* m_node.Node */ p_model, /* { int x, int y, int width, int height } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_model; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_model: ' + PARAM); } 
        /* @DEVELOMPENT } */

        return new NodeWidget(p_model, p_options);
    } else {
        return new NodeWidget();
    }
}

NodeWidget.prototype.constructor = NodeWidget;

/* m_node.Node | this */ NodeWidget.prototype.model = NodeWidget.prototype.node = function(/* m_node.Node */ p_model) {
    if ( typeof(p_model) !== 'undefined' ) {
        this._model = p_model;
        return this;
    }
    return this._model;
};

/* m_map.Map */ NodeWidget.prototype.map = function() {
    return this._model.map();
};

NodeWidget.prototype.x = function(/* int */ p_x) {
    if ( typeof(p_x) !== 'undefined' ) {
        this._x = p_x;
        return this;
    }
    return this._x;
};

NodeWidget.prototype.y = function(/* int */ p_y) {
    if ( typeof(p_y) !== 'undefined' ) {
        this._y = p_y;
        return this;
    }
    return this._y;
};

NodeWidget.prototype.width = function(/* int */ p_width) {
    if ( typeof(p_width) !== 'undefined' ) {
        this._width = p_width;
        return this;
    }
    return this._width;
};

NodeWidget.prototype.x2 = function() {
    return this._x + this._width;
};

NodeWidget.prototype.y2 = function() {
    return this._y + this._height;
};

NodeWidget.prototype.height = function(/* int */ p_height) {
    if ( typeof(p_height) !== 'undefined' ) {
        this._height = p_height;
        return this;
    }
    return this._height;
};

/* this */ NodeWidget.prototype.resize = function(/* int */ p_width, /* int */ p_height) {
    this._width = p_width;
    this._height = p_height;
    return this;
};

/* this */ NodeWidget.prototype.moveTo = function(/* int */ p_x, /* int */ p_y) {
    this._x = p_x;
    this._y = p_y;
    return this;
};

/* int */ NodeWidget.prototype.id = function(/* int */ p_id) {
    if ( typeof(p_id) !== 'undefined' ) {
        this._id = p_id;
        return this;
    }
    return this._id;
};

NodeWidget.prototype.vector = function() {
    return m_vector.vector(this._x, this._y);
};

exports.NodeWidget = NodeWidget;
exports.nodeWidget = nodeWidget;
