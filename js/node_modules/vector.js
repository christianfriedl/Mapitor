/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

/*
 * our few necessary vector functions
 * Note: we only have 2dimensional vectors, which are equal to points!
 */

"use strict";

function Vector(/* number */ x, /* number */ y) {
    this.x = x;
    this.y = y;
};

function vector(x, y) {
    return new Vector(x, y);
};

Vector.prototype.constructor = Vector;

Vector.prototype.add = Vector.prototype.plus = function(v) {
    return new Vector(this.x + v.x, this.y + v.y);
};

Vector.prototype.subtract = Vector.prototype.minus = function(v) {
    return new Vector(this.x - v.x, this.y - v.y);
};

Vector.prototype.gradient = function() {
    return (this.y) / (this.x);
};

Vector.prototype.normalGradient = function() {
    return 1 / this.gradient();
};

Vector.prototype.reverseGradient = function() {
    return -(this.gradient());
};

Vector.prototype.inverse = function() {
    return new Vector(-this.x, -this.y);
};

Vector.prototype.normal = function() {
    return new Vector(this.y, -this.x);
};

Vector.prototype.scale = Vector.prototype.scalarMultiply = function(factor) {
    return new Vector(this.x * factor, this.y * factor);
};

Vector.prototype.magnitude = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
};

Vector.prototype.normalize = function() {
    var m = this.magnitude();
    return new Vector(this.x / m, this.y / m);
};

exports.Vector = Vector;
exports.vector = vector;
