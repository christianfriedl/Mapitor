"use strict";

var $ = require('jquery');
var Raphael = require('raphael');
var m_map = require('map.js');
var m_mapPainter = require('painter/mapPainter.js');

function UI(/* dom element */ p_parent, /* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */
        this._parent = p_parent;
        this._paper = Raphael(this._parent, this.domWidth(), this.domHeight());
        this._map = p_map;
    }
};

function ui(/* dom element */ p_parent, /* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */
        return new UI(p_parent, p_map);
    } else {
        return new UI();
    }
};

UI.prototype.constructor = UI;

UI.prototype.domWidth = function() {
    return $(this._parent).width();
};

UI.prototype.domHeight = function() {
    return $(this._parent).height();
};

UI.prototype.paper = function() {
    return this._paper;
};

UI.prototype.doTest = function() {

    /*
    var m_vector = require('vector.js');
    var v = m_vector.vector(50, 80);
    console.log('v', v);
    console.log('v.normal', v.normal());
    console.log('v.normalize', v.normalize());
    console.log('v.add normal', v.add(v.normal()));
    console.log('v.add normal normalize scale', v.add(v.normal().normalize()));

    this._paper.line(100, 100, 100 + v.x, 100 + v.y).attr('stroke', 'green').attr('stroke-width', '5').attr('arrow-end', 'classic');
    this._paper.line(100, 100, 100 + v.normal().x, 100 + v.normal().y).attr('stroke', 'red').attr('stroke-width', '5');
    this._paper.line(100, 100, 100 + v.normal().inverse().x, 100 + v.normal().inverse().y).attr('stroke', 'red').attr('stroke-width', '5');

        return;
        */



    var m_textNode = require('node/textNode.js');
    var m_arrow = require('node/arrow.js');

    var i = 1;
    var tn = m_textNode.textNode(this._map, this._map.area(), { text: 'CENTtext (' + i + ')', preferredX: 180, preferredY: 180, width: 100, height: 40 });
    this._map.area().addNode(tn);
    ++i;
    var tn2 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn2);
    ++i;
    var tn3 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn3);
    ++i;
    var tn4 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn4);
    ++i;
    var tn5 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn5);
    ++i;
    var tn6 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn6);
    ++i;
    var tn7 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn7);
    ++i;
    var tn8 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn8);
    ++i;
    var tn9 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn9);
    ++i;

    var a1 = m_arrow.arrow(this._map, this._map.area(), tn, tn2, m_arrow.Direction.forward, {});
    var a2 = m_arrow.arrow(this._map, this._map.area(), tn, tn3, m_arrow.Direction.forward, {});
    var a3 = m_arrow.arrow(this._map, this._map.area(), tn, tn4, m_arrow.Direction.forward, {});
    var a4 = m_arrow.arrow(this._map, this._map.area(), tn, tn5, m_arrow.Direction.forward, {});
    var a5 = m_arrow.arrow(this._map, this._map.area(), tn, tn6, m_arrow.Direction.forward, {});

    var a6 = m_arrow.arrow(this._map, this._map.area(), tn4, tn7, m_arrow.Direction.forward, {});
    var a7 = m_arrow.arrow(this._map, this._map.area(), tn4, tn8, m_arrow.Direction.forward, {});
    var a8 = m_arrow.arrow(this._map, this._map.area(), tn4, tn9, m_arrow.Direction.forward, {});

    this._map.layoutMethod(m_map.LayoutMethod.circular);
    this._map._currentNode = tn;

    this.layout();
    this.paint();
};


UI.prototype.paint = function() {
    var painter = m_mapPainter.mapPainter(this._map, this._paper);
    painter.paint();
};

UI.prototype.layout = function() {
    this._map.layout();
};

UI.prototype.editTextNode = function(p_node, p_painter) {
    var bbox = p_painter.bBox();
    var self = this;
    $('#textnode-editor')
        .css('left', bbox.x)
        .css('top', bbox.y)
        .css('width', Math.max(bbox.width, 300))
        .css('height', Math.max(bbox.height, 200))
        .val(p_node.text())
        .show()
        .focus()
        .change(function() { 
            p_node.text($(this).val()); 
            $(this).hide(); 

            self.layout(); 
            self.paint(); 
        });
};


exports.UI = UI;
exports.ui = ui;
