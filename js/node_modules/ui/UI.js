var $ = require('jquery');
var Raphael = require('raphael');
var m_map = require('map.js');

function UI(/* dom element */ p_parent, /* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */
        this._parent = p_parent;
        this._paper = Raphael(this._parent, this.domWidth(), this.domHeight());
        this._map = p_map;
    }
};

function ui(/* dom element */ p_parent, /* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */
        return new UI(p_parent, p_map);
    } else {
        return new UI();
    }
};

UI.prototype.constructor = UI;

UI.prototype.domWidth = function() {
    return $(this._parent).width();
};

UI.prototype.domHeight = function() {
    return $(this._parent).height();
};

UI.prototype.paint = function() {
    var m_textNode = require('node/textNode.js');
    var m_textNodePainter = require('painter/textNodePainter.js');
    var m_painterFactory = require('painter/painterFactory.js');
    var tn = m_textNode.textNode(this._map, this._map.area(), { text: 'textiii', x: 100, y: 100 });
    var tnp = m_painterFactory.painterFactory(this._paper).forObject(tn);
    tnp.paint();
};


exports.UI = UI;
exports.ui = ui;
