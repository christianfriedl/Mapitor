"use strict";

var $ = require('jquery');
var Raphael = require('raphael');
var m_map = require('map.js');
var m_mapPainter = require('painter/mapPainter.js');
var m_keyboardEventMapper = require('ui/keyboardEventMapper.js');
var m_painterFactory = require('painter/painterFactory.js');

var m_createTextNodeCommand = require('command/createTextNodeCommand.js');
var m_deleteNodeCommand = require('command/deleteNodeCommand.js');

function UI(/* dom element */ p_parent, /* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */
        this._parent = p_parent;
        this._paper = Raphael(this._parent, this.domWidth(), this.domHeight());
        this._map = p_map;
        this._keyboardEventMapper = m_keyboardEventMapper.keyboardEventMapper();
    }
};

UI.prototype.constructor = UI;

function ui(/* dom element */ p_parent, /* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */
        return new UI(p_parent, p_map);
    } else {
        return new UI();
    }
};

UI.prototype.constructor = UI;

UI.prototype.domWidth = function() {
    return $(this._parent).width();
};

UI.prototype.domHeight = function() {
    return $(this._parent).height();
};

UI.prototype.paper = function() {
    return this._paper;
};

UI.prototype.doTest = function() {

    var m_textNode = require('node/textNode.js');
    var m_arrow = require('node/arrow.js');

    var i = 1;
    var tns = [];

    for (i = 0; i < 10; ++i) {
        tns[i] = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 180, preferredY: 180, width: 100, height: 40 });
        this._map.area().addNode(tns[i]);
    }
    var a;
    var somanyarrows = Math.floor(tns.length / 2);
    for (i = 1; i < somanyarrows; ++i) {
        var fromIndex = Math.floor(Math.random() * tns.length);
        var toIndex = null;
        do {
            toIndex = Math.floor(Math.random() * tns.length);
        } while (fromIndex === toIndex);
        a = m_arrow.arrow(this._map, this._map.area(), tns[fromIndex], tns[toIndex], m_arrow.Direction.forward, {});
    }
    this._map.centeredNode(a.sourceNode());
    this._map.focusedNode(a.sourceNode());

    /*
    var tn = m_textNode.textNode(this._map, this._map.area(), { text: 'CENTtext (' + i + ')', preferredX: 180, preferredY: 180, width: 100, height: 40 });
    this._map.area().addNode(tn);
    ++i;
    var tn2 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn2);
    ++i;
    var tn3 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn3);
    ++i;
    var tn4 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn4);
    ++i;
    var tn5 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn5);
    ++i;
    var tn6 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn6);
    ++i;
    var tn7 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn7);
    ++i;
    var tn8 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn8);
    ++i;
    var tn9 = m_textNode.textNode(this._map, this._map.area(), { text: 'text (' + i + ')', preferredX: 100, preferredY: 150, width: 100, height: 40 });
    this._map.area().addNode(tn9);
    ++i;

    var a1 = m_arrow.arrow(this._map, this._map.area(), tn, tn2, m_arrow.Direction.forward, {});
    var a2 = m_arrow.arrow(this._map, this._map.area(), tn, tn3, m_arrow.Direction.forward, {});
    var a3 = m_arrow.arrow(this._map, this._map.area(), tn, tn4, m_arrow.Direction.forward, {});
    var a4 = m_arrow.arrow(this._map, this._map.area(), tn, tn5, m_arrow.Direction.forward, {});
    var a5 = m_arrow.arrow(this._map, this._map.area(), tn, tn6, m_arrow.Direction.forward, {});

    var a6 = m_arrow.arrow(this._map, this._map.area(), tn4, tn7, m_arrow.Direction.forward, {});
    var a7 = m_arrow.arrow(this._map, this._map.area(), tn4, tn8, m_arrow.Direction.forward, {});
    var a8 = m_arrow.arrow(this._map, this._map.area(), tn4, tn9, m_arrow.Direction.forward, {});
    this._map.centeredNode(tn4);
    */

    this._map.layoutMethod(m_map.LayoutMethod.circular);

    this.layout();
    this.paint();
};

/* void */ UI.prototype.run = function() {
    $(window).keydown(function(ev) {
        console.log('keydown', ev);
        this.dispatchKeyboardEvent(ev);
    }.bind(this));
    $(window).keypress(function(ev) {
        console.log('keypress', ev);
        this.dispatchKeyboardEvent(ev);
    }.bind(this));
    $(window).keyup(function(ev) {
        console.log('keyup', ev);
        this.dispatchKeyboardEvent(ev);
    }.bind(this));
};

/* void */ UI.prototype.dispatchKeyboardEvent = function(/* event */ ev) {
    var key = this._keyboardEventMapper.map(ev);
    console.log('key returned from mapper', key);
    if ( key.char !== undefined ) {
        if ( key.ctrl ) {
        } else if ( key.alt ) {
        } else if ( key.printable ) {
        } else {
            switch ( key.char ) {
                case m_keyboardEventMapper.Keys.tab:
                    if ( key.shift ) {
                        console.log('shift tab key!');
                    } else {
                        var cmd = m_createTextNodeCommand.createTextNodeCommand(this, this._map.area());
                        cmd.run();

                    }
                    break;
                case m_keyboardEventMapper.Keys.del:
                    m_deleteNodeCommand.deleteNodeCommand(this, this._map.focusedNode()).run();
                    break;
                default:
                    switch ( String.fromCharCode(key.char) ) {
                        default:
                            console.log('default', String.fromCharCode(key.char));
                    }
            }
        }
    }
};


UI.prototype.paint = function() {
    var painter = m_mapPainter.mapPainter(this._map, this._paper);
    painter.paint();
};

UI.prototype.layout = function() {
    this._map.layout();
};

UI.prototype.editTextNode = function(p_node) {
    var pf = m_painterFactory.painterFactory(this._map, this._paper);
    var painter = pf.forObject(this._map.focusedNode());
    var bbox = painter.bBox();
    var self = this;
    $('#textnode-editor')
        .off()
        .css('left', bbox.x)
        .css('top', bbox.y)
        .css('width', Math.max(bbox.width, 300))
        .css('height', Math.max(bbox.height, 200))
        .val(p_node.text())
        .show()
        .focus()
        .change(function() { 
            p_node.text($(this).val()); 
            $(this).hide(); 

            self.layout(); 
            self.paint(); 
        })
        .blur(function() {
            $(this).hide();
            self.layout();
            self.paint();
        });
};

/* m_map.Map */ UI.prototype.map = function() {
    return this._map;
}


exports.UI = UI;
exports.ui = ui;
