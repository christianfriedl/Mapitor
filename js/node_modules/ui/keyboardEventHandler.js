/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

/*
 * map a browser keyboard event (of type keyup) to an abstract key / ascii key
 */
"use strict";

var Keys = {
    tab: 9,
    enter: 13,
    esc: 27,
    space: 32,

    del: 46,
};

function KeyboardEventHandler() {
}

function keyboardEventHandler() {
    return new KeyboardEventHandler();
}

KeyboardEventHandler.prototype.constructor = KeyboardEventHandler;

/* { keyCode, char, ctrl, alt } */ KeyboardEventHandler.prototype.handle = function(/* event */ ev) {
    var code = undefined;
    var rv = {
        char: undefined,
        keyCode: undefined,
        ctrl: undefined,
        alt: undefined,
        shift: undefined,
        printable: undefined
    };

    if ( ev.target !== window.document.body ) {
        return rv;
    }

    if (ev.type === 'keypress' && !ev.ctrlKey && !ev.altKey && this.isPrint(ev.keyCode) ) { // handle normal key
        console.log('do keypress, keycode=', ev.keyCode, 'charCode=', ev.charCode);
        rv.char = ev.keyCode;
        rv.keyCode = ev.keyCode;
        rv.ctrl = ev.ctrlKey;
        rv.alt = ev.altKey;
        rv.shift = ev.shiftKey;
        rv.printable = true;
        ev.stopPropagation();
        ev.preventDefault();
    } else if ( ev.type === 'keypress' && ev.ctrlKey && !ev.altKey && ev.keyCode >= 1 && ev.keyCode <= 26 ) { // handle ctrl key combination
        console.log('do keypress, keycode=', ev.keyCode);
        rv.char = ev.keyCode + 64;
        rv.keyCode = ev.keyCode;
        rv.ctrl = ev.ctrlKey;
        rv.alt = ev.altKey;
        rv.shift = ev.shiftKey;
        rv.printable = false;
        ev.stopPropagation();
    } else if (ev.type === 'keydown' && !ev.ctrlKey && !ev.altKey ) { // handle tab key, esc key
        console.log('do keydown, keycode=', ev.keyCode);
        rv.char = ev.keyCode;
        rv.keyCode = ev.keyCode;
        rv.ctrl = ev.ctrlKey;
        rv.alt = ev.altKey;
        rv.shift = ev.shiftKey;
        rv.printable = false;
        ev.stopPropagation();
        ev.preventDefault();
    } else if ( ev.type === 'keydown' && !ev.ctrlKey && ev.altKey && ev.keyCode >= 65 && ev.keyCode <= 122 ) { // handle alt key combination
        console.log('do keyup, keycode=', ev.keyCode);
        rv.char = ev.keyCode;
        rv.keyCode = ev.keyCode;
        rv.ctrl = ev.ctrlKey;
        rv.alt = ev.altKey;
        rv.shift = ev.shiftKey;
        rv.printable = false;
        ev.stopPropagation();
    } 
    return rv;
};

KeyboardEventHandler.prototype.isPrint = function(keyCode) {
    return (keyCode >= 32 && keyCode <= 126);
};


exports.KeyboardEventHandler = KeyboardEventHandler;
exports.keyboardEventHandler = keyboardEventHandler;
exports.Keys = Keys;
