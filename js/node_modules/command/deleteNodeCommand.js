/*
 * undoable command to delete a node
 * @TODO possible error when deleting top area
 */

"use strict";

var m_map = require('map.js');
var m_command = require('command/command.js');
var m_textNode = require('node/textNode.js');
var m_arrow = require('node/arrow.js');
var m_node = require('node/node.js');

function DeleteNodeCommand(/* m_map.Map */ p_map, /* m_node.Node */ p_node) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
            var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_node:' + p_node); } 
        /* @DEVELOMPENT } */
        m_command.Command.call(this, p_map);
        this._node = p_node;
    } else {
        m_command.Command.call(this);
    }
};

function deleteNodeCommand(/* m_map.Map */ p_map, /* m_node.Node */ p_node) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
            var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_node:' + p_node); } 
        /* @DEVELOMPENT } */
        return new DeleteNodeCommand(p_map, p_node);
    } else {
        return new DeleteNodeCommand();
    }
};

DeleteNodeCommand.prototype = new m_command.Command();
DeleteNodeCommand.prototype.constructor = DeleteNodeCommand;

DeleteNodeCommand.prototype.run = function() {
    this._map.deleteNode(this._node);
};

DeleteNodeCommand.prototype.undo = function() {
    throw new Error('not yet implemented');
};

exports.DeleteNodeCommand = DeleteNodeCommand;
exports.deleteNodeCommand = deleteNodeCommand;

