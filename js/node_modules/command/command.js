/*
 * abstract base class for commands that all have a run() and undo() function
 */

"use strict";

var m_map = require('map.js');

function Command(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
        /* @DEVELOMPENT } */
        this._map = p_map;
    }
}

function command(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
        /* @DEVELOMPENT } */
        return new Command(p_map);
    } else {
        return new Command();
    }
}

Command.prototype.constructor = Command;

Command.prototype.run = function() {
    throw new Error('run() called on bare Command object');
};

Command.prototype.undo = function() {
    throw new Error('undo() called on bare Command object');
};

exports.Command = Command;
exports.command = command;
