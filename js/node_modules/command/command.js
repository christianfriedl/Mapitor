/*
 * abstract base class for commands that all have a run() and undo() function
 */

"use strict";

var m_ui = require('ui/UI.js');

function Command(/* m_ui.UI */ p_ui) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_ui; if ( !(PARAM instanceof m_ui.UI) ) { throw new Error('typecheck failed on p_ui:' + p_ui); } 
        /* @DEVELOMPENT } */
        this._ui = p_ui;
    }
}

function command(/* m_ui.UI */ p_ui) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_ui; if ( !(PARAM instanceof m_ui.UI) ) { throw new Error('typecheck failed on p_ui:' + p_ui); } 
        /* @DEVELOMPENT } */
        return new Command(p_ui);
    } else {
        return new Command();
    }
}

Command.prototype.constructor = Command;

Command.prototype.run = function() {
    throw new Error('run() called on bare Command object');
};

Command.prototype.undo = function() {
    throw new Error('undo() called on bare Command object');
};

exports.Command = Command;
exports.command = command;
