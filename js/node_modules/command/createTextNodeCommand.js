/*
 * undoable command to create a text node
 */

"use strict";

var m_map = require('map.js');
var m_command = require('command/command.js');
var m_textNode = require('node/textNode.js');
var m_arrow = require('node/arrow.js');

function CreateTextNodeCommand(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
        /* @DEVELOMPENT } */
        m_command.Command.call(this, p_map);
    } else {
        m_command.Command.call(this);
    }
};

function createTextNodeCommand(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
        /* @DEVELOMPENT } */
        return new CreateTextNodeCommand(p_map);
    } else {
        return new CreateTextNodeCommand();
    }
};

CreateTextNodeCommand.prototype = new m_command.Command();
CreateTextNodeCommand.prototype.constructor = CreateTextNodeCommand;

CreateTextNodeCommand.prototype.run = function() {
    var node = m_textNode.textNode(this._map, this._map.area(), {});
    var a = m_arrow.arrow(this._map, this._map.area(), this._map.focusedNode(), node, m_arrow.Direction.forward, {});
    this._map.focusedNode(node);
};

CreateTextNodeCommand.prototype.undo = function() {
    throw new Error('not yet implemented');
};

exports.CreateTextNodeCommand = CreateTextNodeCommand;
exports.createTextNodeCommand = createTextNodeCommand;

