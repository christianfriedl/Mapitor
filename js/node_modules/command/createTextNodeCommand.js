/*
 * undoable command to create a text node
 */

"use strict";

var m_map = require('map.js');
var m_command = require('command/command.js');
var m_textNode = require('node/textNode.js');
var m_area= require('node/area.js');
var m_arrow = require('node/arrow.js');

function CreateTextNodeCommand(/* m_map.Map */ p_map, /* m_area.Area */ p_area) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
            var PARAM = p_area; if ( !(PARAM instanceof m_area.Area) ) { throw new Error('typecheck failed on p_area:' + p_area); } 
        /* @DEVELOMPENT } */
        m_command.Command.call(this, p_map);
        this._area = p_area;
    } else {
        m_command.Command.call(this);
    }
};

function createTextNodeCommand(/* m_map.Map */ p_map, /* m_area.Area */ p_area) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('typecheck failed on p_map:' + p_map); } 
            var PARAM = p_area; if ( !(PARAM instanceof m_area.Area) ) { throw new Error('typecheck failed on p_area:' + p_area); } 
        /* @DEVELOMPENT } */
        return new CreateTextNodeCommand(p_map, p_area);
    } else {
        return new CreateTextNodeCommand();
    }
};

CreateTextNodeCommand.prototype = new m_command.Command();
CreateTextNodeCommand.prototype.constructor = CreateTextNodeCommand;

CreateTextNodeCommand.prototype.run = function() {
    this._node = this._map.createTextNode();
};

CreateTextNodeCommand.prototype.undo = function() {
    throw new Error('not yet implemented');
};

exports.CreateTextNodeCommand = CreateTextNodeCommand;
exports.createTextNodeCommand = createTextNodeCommand;

