/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

/*
 * undoable command to create a text node
 */

"use strict";

var m_map = require('map.js');
var m_command = require('command/command.js');
var m_textNode = require('node/textNode.js');
var m_area= require('node/area.js');
var m_arrow = require('node/arrow.js');
var m_ui = require('ui/UI.js');

function CreateTextNodeCommand(/* UI */ p_ui, /* m_area.Area */ p_area) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_ui; if ( !(PARAM instanceof m_ui.UI) ) { throw new Error('typecheck failed on p_ui:' + PARAM); } 
            var PARAM = p_area; if ( !(PARAM instanceof m_area.Area) ) { throw new Error('typecheck failed on p_area:' + PARAM); } 
        /* @DEVELOMPENT } */
        m_command.Command.call(this, p_ui);
        this._area = p_area;
    } else {
        m_command.Command.call(this);
    }
};

function createTextNodeCommand(/* m_ui.UI */ p_ui, /* m_area.Area */ p_area) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 2; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_ui; if ( !(PARAM instanceof m_ui.UI) ) { throw new Error('typecheck failed on p_ui:' + PARAM); } 
            var PARAM = p_area; if ( !(PARAM instanceof m_area.Area) ) { throw new Error('typecheck failed on p_area:' + p_area); } 
        /* @DEVELOMPENT } */
        return new CreateTextNodeCommand(p_ui, p_area);
    } else {
        return new CreateTextNodeCommand();
    }
};

CreateTextNodeCommand.prototype = new m_command.Command();
CreateTextNodeCommand.prototype.constructor = CreateTextNodeCommand;

CreateTextNodeCommand.prototype.run = function() {
    this._node = this._ui.map().createTextNode();
    this._ui.layout();
    this._ui.paint();
    this._ui.editTextNode(this._ui.map().focusedNode());
};

CreateTextNodeCommand.prototype.undo = function() {
    throw new Error('not yet implemented');
};

exports.CreateTextNodeCommand = CreateTextNodeCommand;
exports.createTextNodeCommand = createTextNodeCommand;

