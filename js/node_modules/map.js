var $ = require('jquery');
var Raphael = require('raphael');
var m_node = require('node.js');

function Map(/* dom Element */ p_parent, /* browser window */ p_window) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
             var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
        /* @DEVELOPMENT } */
        this._parent = p_parent;
        this._nodes = [];
        $(this._parent).width($(p_window.document).width());
        $(this._parent).height($(p_window.document).height());
        this._width = 256;
        this._height = 256;
        $(this._parent).css('border', '1px solid blue');
        this._paper = Raphael(this._parent, this.domWidth(), this.domHeight());
    }
}

function map(/* dom Element */ p_parent, /* browser window */ p_window) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
             var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
        /* @DEVELOPMENT } */
        return new Map(p_parent, p_window);
    } else {
        return new Map();
    }
}

Map.prototype.constructor = Map;

Map.prototype.addNode = function(/*m_node.Node */ p_node) {
    /* @DEVELOPMENT { */
    var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_node should be of type m_node.Node'); }
    /* @DEVELOPMENT } */
    this._nodes.push(p_node);
};

Map.prototype.domWidth = function() {
    return $(this._parent).width();
};

Map.prototype.domHeight = function() {
    return $(this._parent).height();
};

Map.prototype.paint = function() {
    var c = this._paper.circle(30, 30, 20);
    c.attr({ stroke: '#000', fill: '#ff0000' });
};

function makeSVG(tag, attrs) {
    var el= document.createElementNS('http://www.w3.org/2000/svg', tag);
    for (var k in attrs)
        el.setAttribute(k, attrs[k]);
    return el;
}

exports.Map = Map;
exports.map = map;
