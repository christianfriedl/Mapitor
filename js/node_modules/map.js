/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var m_node = require('node/node.js');
var m_textNode = require('node/textNode.js');
var m_arrow = require('node/arrow.js');
var m_area = require('node/area.js');
var m_layouterFactory = require('layouter/layouterFactory.js');
var m_painterFactory = require('painter/painterFactory.js');
var m_widgetFactory = require('widget/widgetFactory.js');
var m_nodeLayouter = require('layouter/nodeLayouter.js');

var LayoutMethod = { basic: 'basic', circular: 'circular', hierarchical: 'hierarchical' };

function Map() {
    /* @DEVELOPMENT { */
         var LEN = 0; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
    /* @DEVELOPMENT } */
    this._width = 256;
    this._height = 256;
    this._painters = {}; // map<node-id, painter>
    this._layouters = {}; // map<node-id, layouter>
    this._widgets = {} // map<node-id, widget>
    this._layoutMethod = LayoutMethod.basic;
    this._focusedNode = this._centeredNode = null;
    this._widgetFactory = m_widgetFactory.widgetFactory(this);
    this._layouterFactory = m_layouterFactory.layouterFactory(this);
    this._painterFactory = m_painterFactory.painterFactory(this);
    this._area = m_area.area(this, null, { preferredX: 2, preferredY: 2, width: this._width - 4, height: this._height - 4} );
}

function map() {
    /* @DEVELOPMENT { */
         var LEN = 0; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
    /* @DEVELOPMENT } */
    return new Map();
}


Map.prototype.constructor = Map;

/* m_area.Area */ Map.prototype.area = function() {
    return this._area;
};

/* m_node.Node */ Map.prototype.centeredNode = function(/* m_node.Node */ p_node) {
    if ( typeof(p_node) !== 'undefined' ) {
        this._centeredNode = p_node;
        return this;
    }
    return this._centeredNode;
};

/* m_node.Node */ Map.prototype.focusedNode = function(/* m_node.Node */ p_node) {
    if ( typeof(p_node) !== 'undefined' ) {
        this._focusedNode = p_node;
        return this;
    }
    return this._focusedNode;
};

/* Painter */ Map.prototype.painter = function(/* m_node.Node */ p_node) {
    var id = p_node.id();
    if ( typeof(this._painters[id]) === 'undefined' ) {
        this._painters[id] = this._painterFactory.forObject(p_node);
    }
    return this._painters[id];
};

/* LayoutMethod|undefined */ Map.prototype.layoutMethod = function(/* optional LayoutMethod */ p_layoutMethod) {
    if ( typeof(p_layoutMethod) !== 'undefined' ) {
        this._layoutMethod = p_layoutMethod;
        return this;
    }
    return this._layoutMethod;
};

/* this */ Map.prototype.layout = function() {
    var layouter = m_layouterFactory.layouterFactory(this).forObject(this._area);
    layouter.layout();

    return this;
};

/* m_nodeLayouter.Layouter */ Map.prototype.layouter = function(/* m_node.Node */ p_node) {
    /* @DEVELOPMENT { */
        var ARGLEN = 1; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
        var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_node: ' + PARAM); } 
    /* @DEVELOMPENT } */

    var id = p_node.id();

    if ( typeof(this._layouters[id]) === 'undefined' ) {
        this._layouters[id] = {};
    }

    if ( typeof(this._layouters[id][this._layoutMethod]) === 'undefined' ) {
        this._layouters[id][this._layoutMethod] = this._layouterFactory.forObject(p_node);
    }

    return this._layouters[id][this._layoutMethod];
}

/* m_nodeWidget.NodeWidget */ Map.prototype.widget = function(/* m_node.Node */ p_node) {
    var id = p_node.id();

    if ( typeof(this._widgets[id]) === 'undefined' ) {
        var options = { x: p_node.preferredX(), y: p_node.preferredY() };
        this._widgets[id] = this._widgetFactory.forObject(p_node, options);
    }
    return this._widgets[id];
};


/* this */ Map.prototype.resize = function(/* int */ p_width, /* int */ p_height) {
    this._width  = p_width;
    this._height = p_height;
    this.widget(this._area).resize(p_width - 4, p_height - 4);
    return this;
};

/* this */ Map.prototype.createTextNode = function() {
    var node = m_textNode.textNode(this, this._area, { text: '' });
    this._area.addNode(node);
    var a = m_arrow.arrow(this, this._area, this._focusedNode, node, m_arrow.Direction.forward, {});
    this.focusedNode(node);
    return this;
};

/* this */ Map.prototype.deleteNode = function(/* m_node.Node */ p_node) {
    /* @DEVELOPMENT { */
        var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_node ' + PARAM); } 
    /* @DEVELOMPENT } */

    if ( p_node === this._focusedNode ) {
        this.focusedNode(this._centeredNode);
    }
    if ( p_node === this._centeredNode ) {
        throw new Error('unable to delete centered node... TODO'); // @TODO
    }
    var pf = m_painterFactory.painterFactory(this, window.mapitor.ui.paper());
    var painter = this._painters[p_node.id()];
    if ( typeof(painter) === 'undefined' ) {
        painter = pf.forObject(p_node);
    }
    painter.deleteNodes();
    _(p_node.arrows()).each(function(a) { 
        var f = pf.forObject(a);
        f.deleteNodes(); 
        delete this._painters[a.id()];
        delete this._layouters[a.id()];
    }.bind(this));
    delete this._painters[p_node.id()];
    delete this._layouters[p_node.id()];
    p_node.delete();
};

Map.prototype.painterFactory = function(p_painterFactory) {
    if ( typeof(p_painterFactory) !== 'undefined' ) {
        this._painterFactory = p_painterFactory;
        return this;
    }
    return this._painterFactory;
};

exports.Map = Map;
exports.map = map;
exports.LayoutMethod = LayoutMethod;
