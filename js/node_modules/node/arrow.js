"use strict";

var m_map = require('map.js');
var m_node = require('node/node.js');

var Direction = { 
    forward: 'forward' /* from source to target */,
    backward: 'backward' /* from target to source */,
    bidirectional: 'bidirectional' /* from source to target and back */,
    none: 'none'
};

function Arrow(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* m_node.Node */ p_sourceNode, /* m_node.Node */ p_targetNode, /* Direction */ direction, /* { int x, int y, string text } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 5; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
            var PARAM = p_sourceNode; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_sourceNode'); } 
            var PARAM = p_targetNode; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_targetNode'); } 
        /* @DEVELOPMENT } */
        m_node.Node.call(this, p_map, p_parent, p_options);
        this._map = p_map;
        this._text = p_options.text;
        this._sourceNode = p_sourceNode;
        this._targetNode = p_targetNode;
        this._direction = p_direction;

        this._sourceNode.addArrow(this);
        this._targetNode.addArrow(this);
    } else {
        m_node.Node.call(this);
    }
}

function Arrow(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* m_node.Node */ p_sourceNode, /* m_node.Node */ p_targetNode, /* Direction */ direction, /* { int x, int y, string text } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var ARGLEN = 5; if ( arguments.length !== ARGLEN ) { throw new Error('Illegal argument length '  + arguments.length + ', should be ' + ARGLEN); } 
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
            var PARAM = p_sourceNode; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_sourceNode'); } 
            var PARAM = p_targetNode; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_targetNode'); } 
        /* @DEVELOPMENT } */
        return new Arrow(p_map, p_parent, p_sourceNode, p_targetNode, p_options);
    } else {
        return new Arrow();
    }
}

Arrow.prototype = new m_node.Node();
Arrow.prototype.constructor = Arrow;

Arrow.prototype.text = function(/* string */ p_text) {
    if ( typeof(p_text) !== 'undefined' ) {
        this._text = p_text;
        return this;
    }
    return this._text;
};

/* todo change links in old/new source node */
Arrow.prototype.sourceNode = function(/* string */ p_sourceNode) {
    if ( typeof(p_sourceNode) !== 'undefined' ) {
        this._sourceNode = p_sourceNode;
        return this;
    }
    return this._sourceNode;
};

/* todo change links in old/new target node */
Arrow.prototype.targetNode = function(/* string */ p_targetNode) {
    if ( typeof(p_targetNode) !== 'undefined' ) {
        this._targetNode = p_targetNode;
        return this;
    }
    return this._targetNode;
};

Arrow.prototype.direction = function(/* string */ p_direction) {
    if ( typeof(p_direction) !== 'undefined' ) {
        this._direction = p_direction;
        return this;
    }
    return this._direction;
};


exports.Arrow = Arrow;
exports.arrow = arrow;
