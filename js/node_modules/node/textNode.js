/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

"use strict";

var m_map = require('map.js');
var m_node = require('node/node.js');
var md5 = require('md5');

function TextNode(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* { string text } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        m_node.Node.call(this, p_map, p_parent, p_options);
        this._map = p_map;
        this._text = p_options.text;
    }
}

function textNode(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* { string text } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node: ', PARAM); }
        /* @DEVELOPMENT } */
        return new TextNode(p_map, p_parent, p_options);
    } else {
        return new TextNode();
    }
}

TextNode.prototype = new m_node.Node();
TextNode.prototype.constructor = TextNode;

TextNode.prototype.text = function(/* string */ p_text) {
    if ( typeof(p_text) !== 'undefined' ) {
        this._text = p_text;
        return this;
    }
    return this._text;
};

TextNode.prototype.hashCode = function() {
    return md5([this._x, this._y, this._text].join('-'));
};

exports.TextNode = TextNode;
exports.textNode = textNode;
