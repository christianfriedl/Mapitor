"use strict";

var m_map = require('map.js');
var m_node = require('node/node.js');

var currentNodeId = 0;

function Node(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, 
        /* { int x, int y, int width, int height, int preferredX, int preferredY, string name } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM === null || PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        this._map = p_map;
        this._parent = p_parent;

        this._x = p_options.x;
        this._y = p_options.y;
        this._preferredX = p_options.preferredX;
        this._preferredY = p_options.preferredY;
        this._width = p_options.width;
        this._height = p_options.height;
        this._name = p_options.name;
        this._id = ++currentNodeId;
        console.log('node id', this._id);
    }
}

function node(/* m_map.Map */ p_map, /* m_node.Node */ p_parent) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM === null || PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        return new Node(p_map);
    } else {
        return new Node();
    }
}

Node.prototype.constructor = Node;

Node.prototype.map = function(/* m_map.Map */ p_map) {
    if ( typeof(p_map) !== 'undefined' ) {
        this._map = p_map;
        return this;
    }
    return this._map;
};

/* m_node.Node|void */ Node.prototype.parent = function(/* m_node.Node */ p_parent) {
    if ( typeof(p_parent) !== 'undefined' ) {
        this._parent = p_parent;
        return this;
    }
    return this._parent;
};

Node.prototype.x = function(/* int */ p_x) {
    if ( typeof(p_x) !== 'undefined' ) {
        this._x = p_x;
        console.log('node', this._id, ': x', this._x);
        return this;
    }
    return this._x;
};

Node.prototype.y = function(/* int */ p_y) {
    if ( typeof(p_y) !== 'undefined' ) {
        this._y = p_y;
        console.log('node', this._id, ': y', this._y);
        return this;
    }
    return this._y;
};

Node.prototype.preferredX = function(/* int */ p_x) {
    if ( typeof(p_x) !== 'undefined' ) {
        this._preferredX = p_x;
        return this;
    }
    return this._preferredX;
};

Node.prototype.preferredY = function(/* int */ p_y) {
    if ( typeof(p_y) !== 'undefined' ) {
        this._preferredY = p_y;
        return this;
    }
    return this._preferredY;
};

Node.prototype.width = function(/* int */ p_width) {
    if ( typeof(p_width) !== 'undefined' ) {
        this._width = p_width;
        return this;
    }
    return this._width;
};

Node.prototype.height = function(/* int */ p_height) {
    if ( typeof(p_height) !== 'undefined' ) {
        this._height = p_height;
        return this;
    }
    return this._height;
};

/* this */ Node.prototype.resize = function(/* int */ p_width, /* int */ p_height) {
    this._width = p_width;
    this._height = p_height;
    return this;
};

/* int */ Node.prototype.id = function(/* int */ p_id) {
    if ( typeof(p_id) !== 'undefined' ) {
        this._id = p_id;
        return this;
    }
    return this._id;
};

/* this */ Node.prototype.addArrow = function(/* m_arrow.Arrow */ p_arrow) {
    this._arrows[p_arrow.id()] = p_arrow;
    return this;
};


exports.Node = Node;
exports.node = node;
