var m_map = require('map.js');
var m_node = require('node.js');

function Area(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* { int x, int y, int width, int height } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        m_node.Node.call(this, p_map, p_parent, p_options);
        this._map = p_map;
        this._x = p_options.x;
        this._y = p_options.y;
        this._width = p_options.width;
        this._height = p_options.height;
    }
}

function area(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* { int x, int y, int width, int height } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        return new Area(p_map, p_parent, p_options);
    } else {
        return new Area();
    }
}

Area.prototype = new m_node.Node();
Area.prototype.constructor = Area;

Area.prototype.width = function(/* int */ p_width) {
    if ( typeof(p_width) !== 'undefined' ) {
        this._width = p_width;
        return this;
    }
    return this._width;
};

Area.prototype.height = function(/* int */ p_height) {
    if ( typeof(p_height) !== 'undefined' ) {
        this._height = p_height;
        return this;
    }
    return this._height;
};

exports.Area = Area;
exports.area = area;
