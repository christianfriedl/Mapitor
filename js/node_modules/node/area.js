/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */

"use strict";

var m_map = require('map.js');
var m_node = require('node/node.js');

function Area(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* { int x, int y, int width, int height } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node || PARAM === null) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        m_node.Node.call(this, p_map, p_parent, p_options);
        this._map = p_map;
        this._x = p_options.x;
        this._y = p_options.y;
        this._width = p_options.width;
        this._height = p_options.height;
        this._nodes = [];
    }
}

function area(/* m_map.Map */ p_map, /* m_node.Node */ p_parent, /* { int x, int y, int width, int height } */ p_options) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
            var PARAM = p_parent; if ( !(PARAM instanceof m_node.Node || PARAM === null) ) { throw new Error('type error: param p_parent should be of type m_node.Node'); }
        /* @DEVELOPMENT } */
        return new Area(p_map, p_parent, p_options);
    } else {
        return new Area();
    }
}

Area.prototype = new m_node.Node();
Area.prototype.constructor = Area;

Area.prototype.width = function(/* int */ p_width) {
    if ( typeof(p_width) !== 'undefined' ) {
        this._width = p_width;
        return this;
    }
    return this._width;
};

Area.prototype.height = function(/* int */ p_height) {
    if ( typeof(p_height) !== 'undefined' ) {
        this._height = p_height;
        return this;
    }
    return this._height;
};

Area.prototype.addNode = function(/*m_node.Node */ p_node) {
    /* @DEVELOPMENT { */
        var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_node should be of type m_node.Node'); }
    /* @DEVELOPMENT } */
    this._nodes.push(p_node);
    p_node.parent(this);
};

Area.prototype.deleteNode = function(/* m_node.Node */ p_node) {
    /* @DEVELOPMENT { */
        var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_node should be of type m_node.Node'); }
        if ( ! (_(this._nodes).contains(p_node)) ) { throw new Error('trying to delete node that is not there'); }
    /* @DEVELOPMENT } */

    this._nodes = _(this._nodes).without(p_node);
};

/* array(m_node.Node)|this */Area.prototype.nodes = function(/* array(m_node.Node) */ p_nodes) {
    if ( typeof(p_nodes) !== 'undefined' ) {
        /* @DEVELOPMENT { */
            var PARAM = p_nodes; if ( !(PARAM instanceof Array) ) { throw new Error('type error: param p_nodes should be of type Array'); }
        /* @DEVELOPMENT } */
        this._nodes = p_nodes;
        return this;
    }
    return this._nodes;
};


exports.Area = Area;
exports.area = area;
