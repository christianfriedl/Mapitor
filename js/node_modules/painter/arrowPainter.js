/*
 * this will be able to paint an arrow and its subnodes on a paper
 */

"use strict";

var m_map = require('map.js');
var m_arrow = require('node/arrow.js');
var m_nodePainter = require('painter/nodePainter.js');
var m_painterFactory = require('painter/painterFactory.js');

function ArrowPainter(/* m_arrow.Arrow */ p_node, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_arrow.Arrow) ) { throw new Error('type error: param p_map should be of type m_arrow.Arrow'); }
        /* @DEVELOPMENT } */
        m_nodePainter.NodePainter.call(this, p_node, p_paper);
    }
}

function arrowPainter(/* m_arrow.Arrow */ p_node, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_arrow.Arrow) ) { throw new Error('type error: param p_node should be of type m_arrow.Arrow'); }
        /* @DEVELOPMENT } */
        return new ArrowPainter(p_node, p_paper);
    } else {
        return new ArrowPainter();
    }
}


ArrowPainter.prototype = new m_nodePainter.NodePainter();
ArrowPainter.prototype.constructor = ArrowPainter;

ArrowPainter.prototype.paint = function() {
    if ( this._line === undefined ) {
        this._line = this._paper.path(['M' + this._node.x1(), this._node.y1(), 'L' + this._node.x2(), this._node.y2() ].join(' '));
    }
    this._line.attr({ 'stroke': '#000', 'fill': '#000' });
};

exports.ArrowPainter = ArrowPainter;
exports.arrowPainter = arrowPainter;
