/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var Raphael = require('raphael');
var m_node = require('node/node.js');
var m_textNode = require('node/textNode.js');
var m_area = require('node/area.js');
var m_arrow = require('node/arrow.js');
var m_map = require('map.js');

var m_textNodePainter = require('painter/textNodePainter.js');
var m_areaPainter = require('painter/areaPainter.js');
var m_arrowPainter = require('painter/arrowPainter.js');

function PainterFactory(/* m_map.Map */ p_map, /* Raphael */ p_paper, /* domEl */ p_div) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map', p_map); }
        /* @DEVELOPMENT } */

        this._map = p_map;
        this._paper = p_paper;
        this._div = p_div;
    }
}

function painterFactory(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map', p_map); }
        /* @DEVELOPMENT } */
        return new PainterFactory(p_map);
    }
}

PainterFactory.prototype.constructor = PainterFactory;

PainterFactory.prototype.paper = function(p_paper) {
    if ( typeof(p_paper) !== 'undefined' ) {
        var PARAM = p_paper; if ( !(PARAM instanceof Raphael) ) { throw new Error('type error: param p_paper should be of type Raphael', p_paper); }
        this._paper = p_paper;
        return this;
    }
    return this._paper;
};

PainterFactory.prototype.div = function(p_div) {
    if ( typeof(p_div) !== 'undefined' ) {
        this._div = p_div;
        return this;
    }
    return this._div;
};

PainterFactory.prototype.forObject = function(/* m_node.Node */ p_object) {
    /* @DEVELOPMENT { */
        var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
        var PARAM = p_object; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('typecheck failed on p_object: ' + PARAM); } 
    /* @DEVELOPMENT } */
    if ( this._paper === null ) {
        throw new Error('paper cannot be null');
    }

    if ( p_object instanceof m_textNode.TextNode ) {
        return m_textNodePainter.textNodePainter(this._map.widget(p_object), this._paper, this._div);
    } else if ( p_object instanceof m_area.Area ) {
        return m_areaPainter.areaPainter(this._map.widget(p_object), this._paper, this._div);
    } else if ( p_object instanceof m_arrow.Arrow ) {
        return m_arrowPainter.arrowPainter(this._map.widget(p_object), this._paper, this._div);
    } else {
        throw new Error('no painter defined for class of object', p_object);
    }
};

exports.PainterFactory = PainterFactory;
exports.painterFactory = painterFactory;
