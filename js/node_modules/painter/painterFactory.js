/*
 * TODO: this should really be named nodePainterFactory!, it only creates painters for nodes
 */

"use strict";

var Raphael = require('raphael');
var m_node = require('node/node.js');
var m_textNode = require('node/textNode.js');
var m_area = require('node/area.js');
//var m_arrow = require('node/arrow.js');
var m_map = require('map.js');

var m_textNodePainter = require('painter/textNodePainter.js');
var m_areaPainter = require('painter/areaPainter.js');
//var m_arrowPainter = require('painter/arrowPainter.js');

function PainterFactory(/* m_map.Map */ p_map, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map', p_map); }
            var PARAM = p_paper; if ( !(PARAM instanceof Raphael) ) { throw new Error('type error: param p_paper should be of type Raphael', p_paper); }
        /* @DEVELOPMENT } */

        this._map = p_map;
        this._paper = p_paper;
    }
}

function painterFactory(/* m_map.Map */ p_map, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map', p_map); }
            var PARAM = p_paper; if ( !(PARAM instanceof Raphael) ) { throw new Error('type error: param p_paper should be of type Raphael', p_paper); }
        /* @DEVELOPMENT } */
        return new PainterFactory(p_map, p_paper);
    }
}

PainterFactory.prototype.constructor = PainterFactory;

PainterFactory.prototype.forObject = function(/* object */ p_object) {
    /* @DEVELOPMENT { */
        var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
    /* @DEVELOPMENT } */

    var painter = this._map.painter(p_object);
    if ( painter === undefined ) {
        if ( p_object instanceof m_textNode.TextNode ) {
            painter = m_textNodePainter.textNodePainter(p_object, this._paper);
        } else if ( p_object instanceof m_area.Area ) {
            painter = m_areaPainter.areaPainter(p_object, this._paper);
        /*
        } else if ( p_object instanceof m_arrow.Arrow ) {
            return m_arrowPainter.arrowPainter(p_object, this._paper);
        */
        } else {
            throw new Error('no painter defined for class of object', p_object);
        }

        this._map.addPainter(painter);
    } 

    return painter;
};

exports.PainterFactory = PainterFactory;
exports.painterFactory = painterFactory;
