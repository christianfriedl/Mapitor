/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * paint an area and its subnodes on a paper
 */

"use strict";

var m_map = require('map.js');
var m_area = require('node/area.js');
var m_areaWidget = require('widget/areaWidget.js');
var m_nodePainter = require('painter/nodePainter.js');

function AreaPainter(/* m_nodeWidget.NodeWidget */ p_widget, /* Raphael */ p_paper, /* dom el */ p_parent) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 3; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_areaWidget.AreaWidget) ) { throw new Error('type error: param p_widget should be of type m_areaWidget.AreaWidget'); }
        /* @DEVELOPMENT } */
        m_nodePainter.NodePainter.call(this, p_widget, p_paper, p_parent);
    }
}

function areaPainter(/* m_nodeWidget.NodeWidget */ p_widget, /* Raphael */ p_paper, /* dom el */ p_parent) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 3; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_areaWidget.AreaWidget) ) { throw new Error('type error: param p_widget should be of type m_areaWidget.AreaWidget'); }
        /* @DEVELOPMENT } */
        return new AreaPainter(p_widget, p_paper, p_parent);
    } else {
        return new AreaPainter();
    }
}


AreaPainter.prototype = new m_nodePainter.NodePainter();
AreaPainter.prototype.constructor = AreaPainter;

AreaPainter.prototype.paint = function() {
    var seenArrows = [];
    if ( this._r === undefined ) {
        this._r = this._paper.rect(this._widget.x(), this._widget.y(), this._widget.width(), this._widget.height());
    }
    this._r.attr({ 'stroke': '#ccc', 'fill': '#fff', 'fill-opacity': 0 });
    _(this._node.nodes()).each(function(n) {
        n.map().painter(n).paint();
    }.bind(this));
};

exports.AreaPainter = AreaPainter;
exports.areaPainter = areaPainter;
