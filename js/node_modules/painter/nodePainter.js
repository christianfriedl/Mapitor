/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

"use strict";

var m_node = require('node/node.js');

function NodePainter(/* m_node.Node */ p_node, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_node should be of type m_node.Node'); }
        /* @DEVELOPMENT } */

        this._node = p_node;
        this._paper = p_paper;
    }
}

function nodePainter(/* m_node.Node */ p_node, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_node.Node) ) { throw new Error('type error: param p_node should be of type m_node.Node'); }
        /* @DEVELOPMENT } */

        return new NodePainter(p_node, p_paper);
    } else {
        return new NodePainter();
    }
}

NodePainter.prototype.constructor = NodePainter;

NodePainter.prototype.node = function(/* m_node.Node */ p_node) {
    if ( typeof(p_node) !== 'undefined' ) {
        this._node = p_node;
        return this;
    }
    return this._node;
};

exports.NodePainter = NodePainter;
exports.nodePainter = nodePainter;
