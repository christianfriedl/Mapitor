/*
 * this will be able to paint a text node on a paper
 */

"use strict";

var m_map = require('map.js');
var m_nodePainter = require('painter/nodePainter.js');
var m_textNode = require('node/textNode.js');

function TextNodePainter(/* m_textNode.TextNode */ p_node, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_textNode.TextNode) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */

        m_nodePainter.NodePainter.call(this, p_node, p_paper);
        this._defaultAttr = { 'stroke': '#000', 'fill': '#000', 'font-size': '16px', 'text-anchor': 'middle' };
    }
}

function textNodePainter(/* m_textNode.TextNode */ p_node, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_textNode.TextNode) ) { throw new Error('type error: param p_node should be of type m_textNode.TextNode'); }
        /* @DEVELOPMENT } */

        return new TextNodePainter(p_node, p_paper);
    } else {
        return new TextNodePainter();
    }
}


TextNodePainter.prototype = new m_nodePainter.NodePainter();
TextNodePainter.prototype.constructor = TextNodePainter;

TextNodePainter.prototype.paint = function() {
    if ( this._t === undefined ) {
        this._t = this._paper.text(this._node.x(), this._node.y(), this._node.text());
        this._t.attr(this._defaultAttr);
    } else {
        this._t.attr(this._defaultAttr);
        this._t.attr('x', this._node.x());
        this._t.attr('y', this._node.y());
    }
};

TextNodePainter.prototype.bBox = function() {
    this.paint();
    var bbox = this._t.getBBox();
    return bbox;
};

exports.TextNodePainter = TextNodePainter;
exports.textNodePainter = textNodePainter;
