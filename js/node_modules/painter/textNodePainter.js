/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * this will be able to paint a text node on a paper
 */

"use strict";

var m_map = require('map.js');
var m_nodePainter = require('painter/nodePainter.js');
var m_textNode = require('node/textNode.js');
var m_textNodeWidget = require('widget/textNodeWidget.js');
var md5 = require('md5');

function TextNodePainter(/* m_nodeWidget.NodeWidget */ p_widget, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_textNodeWidget.TextNodeWidget) ) { throw new Error('type error: param p_widget should be of type m_textNodeWidget.TextNodeWidget'); }
        /* @DEVELOPMENT } */

        m_nodePainter.NodePainter.call(this, p_widget, p_paper);
        this._textAttr = { 
            'stroke': '#000', 
            'fill': '#000', 
            'font-family': 'courier', 
            'font-size': '12', 
            'text-anchor': 'middle' 
        };
        this._rectAttr = { 
            'stroke': '#999', 'fill': '#fff', 'opacity': 1
        };
    }
}

function textNodePainter(/* m_nodeWidget.NodeWidget */ p_widget, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_textNodeWidget.TextNodeWidget) ) { throw new Error('type error: param p_widget should be of type m_textNodeWidget.TextNodeWidget'); }
        /* @DEVELOPMENT } */

        return new TextNodePainter(p_widget, p_paper);
    } else {
        return new TextNodePainter();
    }
}


TextNodePainter.prototype = new m_nodePainter.NodePainter();
TextNodePainter.prototype.constructor = TextNodePainter;

TextNodePainter.prototype.paint = function() {
    var bbox = null;
    if ( this._t === undefined ) {
        this._t = this._paper.text(this._widget.x() + 2, this._widget.y() + 2, this._node.text())
        this._t.attr(this._textAttr);
        bbox = this._t.getBBox();
        this._rect = this._paper.rect(this._widget.x() - bbox.width / 2, this._widget.y() - bbox.height / 2, bbox.width + 4, bbox.height + 4, 3)
        var self = this;
        this._t.click(function() {
            window.mapitor.ui.editTextNode(self._node);
        });
    } else {
        this._t.attr('text', this._node.text());
        this._t.attr(this._textAttr);
        this._t.attr('x', this._widget.x() + 2);
        this._t.attr('y', this._widget.y() + 2);
        bbox = this._t.getBBox();
    }
    this._rect.attr(this._rectAttr);
    this._rect.attr( { 'x' : this._widget.x() - bbox.width / 2, 'y' : this._widget.y() - bbox.height / 2, 'width' : bbox.width + 4, 'height' : bbox.height + 4 } );
    if ( this._node === this._node.map().focusedNode() ) {
        this._rect.attr('stroke-width', '3').attr('stroke', '#000');
    }
    this._rect.toFront();
    this._t.toFront();
};

TextNodePainter.prototype.bBox = function() {
    if ( false && this._bboxCacheHash === this._node.hashCode() ) {
        return this._bboxCache;
    }

    this.paint();
    var bbox = this._rect.getBBox();
    this._bboxCacheHash = this._node.hashCode();
    this._bboxCache = bbox;
    return bbox;
};

TextNodePainter.prototype.deleteNodes = function() {
    this._t.remove();
    this._rect.remove();
};

exports.TextNodePainter = TextNodePainter;
exports.textNodePainter = textNodePainter;
