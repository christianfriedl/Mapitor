/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

/*
 * this will be able to paint a whole map on a paper
 * NOTE: MapPainter is NOT a NodePainter!
 */

"use strict";

var _ = require('underscore');

var m_map = require('map.js');

function MapPainter(/* m_map.Map */ p_map, /* Raphael */ p_paper) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */

        this._map = p_map;
        this._paper = p_paper;
    }
}


function mapPainter(/* m_map.Map */ p_map, /* Raphael */ p_paper) {
    // this._paper = Raphael(this._parent, this.domWidth(), this.domHeight());
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 2; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map'); }
        /* @DEVELOPMENT } */

        return new MapPainter(p_map, p_paper);
    } else {
        return new MapPainter();
    }
}

MapPainter.prototype.constructor = MapPainter;

MapPainter.prototype.paint = function() {
    var m_painterFactory = require('painter/painterFactory.js');
    var painter = m_painterFactory.painterFactory(this._map, this._paper).forObject(this._map.area());
    painter.paint();
};

exports.MapPainter = MapPainter;
exports.mapPainter = mapPainter;
