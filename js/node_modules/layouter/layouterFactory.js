"use strict";

var m_node = require('node/node.js');
var m_textNode = require('node/textNode.js');
var m_area = require('node/area.js');
//var m_arrow = require('node/arrow.js');
var m_map = require('map.js');

var m_basic_textNodeLayouter = require('layouter/basic/textNodeLayouter.js');
var m_basic_areaLayouter = require('layouter/basic/areaLayouter.js');
var m_circular_textNodeLayouter = require('layouter/circular/textNodeLayouter.js');
var m_circular_areaLayouter = require('layouter/circular/areaLayouter.js');
//var m_arrowLayouter = require('layouter/arrowLayouter.js');

function LayouterFactory(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map', p_map); }
        /* @DEVELOPMENT } */

        this._map = p_map;
    }
}

function layouterFactory(/* m_map.Map */ p_map) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var PARAM = p_map; if ( !(PARAM instanceof m_map.Map) ) { throw new Error('type error: param p_map should be of type m_map.Map', p_map); }
        /* @DEVELOPMENT } */
        return new LayouterFactory(p_map);
    }
}

LayouterFactory.prototype.constructor = LayouterFactory;

LayouterFactory.prototype.forObject = function(/* object */ p_object) {
    /* @DEVELOPMENT { */
        var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
    /* @DEVELOPMENT } */

    var layouter = this._map.layouter(p_object, this._map.layoutMethod());
    if ( layouter === undefined ) {
        switch ( this._map.layoutMethod() ) {
            case m_map.LayoutMethod.basic:
                if ( p_object instanceof m_textNode.TextNode ) {
                    layouter = m_basic_textNodeLayouter.textNodeLayouter(p_object);
                } else if ( p_object instanceof m_area.Area ) {
                    layouter = m_basic_areaLayouter.areaLayouter(p_object);
                /*
                } else if ( p_object instanceof m_arrow.Arrow ) {
                    return m_basic_arrowLayouter.arrowLayouter(p_object);
                */
                } else {
                    throw new Error('no layouter defined for class of object', p_object);
                }
            break;
            case m_map.LayoutMethod.circular:
                if ( p_object instanceof m_textNode.TextNode ) {
                    layouter = m_circular_textNodeLayouter.textNodeLayouter(p_object);
                } else if ( p_object instanceof m_area.Area ) {
                    layouter = m_circular_areaLayouter.areaLayouter(p_object);
                /*
                } else if ( p_object instanceof m_arrow.Arrow ) {
                    return m_circular_arrowLayouter.arrowLayouter(p_object);
                */
                } else {
                    throw new Error('no layouter defined for class of object', p_object);
                }
            break;
        }

        this._map.addLayouter(layouter, this._map.layoutMethod());
    } else {
        console.log('layouterFactory reusing layouter', layouter);
    }
    return layouter;
};

exports.LayouterFactory = LayouterFactory;
exports.layouterFactory = layouterFactory;
