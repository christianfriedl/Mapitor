/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * TODO: it should probably be renamed to WidgetLayouter
 */

"use strict";

var m_node = require('node/node.js');
var m_nodeWidget = require('widget/nodeWidget.js');
var m_widgetFactory = require('widget/widgetFactory.js');

function NodeLayouter(/* m_node.Node */ p_widget) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_nodeWidget.NodeWidget) ) { throw new Error('type error: param p_widget should be of type m_nodeWidget.NodeWidget'); }
        /* @DEVELOPMENT } */

        this._widget = p_widget;
        this._node = p_widget.node();
        this._widgetFactory = m_widgetFactory.widgetFactory(p_widget.map());
    }
}

function nodeLayouter(/* m_node.Node */ p_widget) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_nodeWidget.NodeWidget) ) { throw new Error('type error: param p_widget should be of type m_nodeWidget.NodeWidget'); }
        /* @DEVELOPMENT } */

        return new NodeLayouter(p_widget);
    } else {
        return new NodeLayouter();
    }
}

NodeLayouter.prototype.constructor = NodeLayouter;

NodeLayouter.prototype.widget = function(/* m_widget.widget */ p_widget) {
    if ( typeof(p_widget) !== 'undefined' ) {
        this._widget = p_widget;
        return this;
    }
    return this._widget;
};

exports.NodeLayouter = NodeLayouter;
exports.nodeLayouter = nodeLayouter;
