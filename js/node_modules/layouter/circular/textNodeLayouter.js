/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

var m_map = require('map.js');
var m_nodeLayouter = require('layouter/nodeLayouter.js');
var m_textNode = require('node/textNode.js');
var m_textNodeWidget = require('widget/textNodeWidget.js');

function TextNodeLayouter(/* m_textNodeWidget.TextNodeWidget */ p_widget) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_textNodeWidget.TextNodeWidget) ) { throw new Error('type error: param p_widget should be of type m_textNodeWidget.TextNodeWidget'); }
        /* @DEVELOPMENT } */

        m_nodeLayouter.NodeLayouter.call(this, p_widget);
    }
}

function textNodeLayouter(/* m_textNodeWidget.TextNodeWidget */ p_widget) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_textNodeWidget.TextNodeWidget) ) { throw new Error('type error: param p_widget should be of type m_textNodeWidget.TextNodeWidget'); }
        /* @DEVELOPMENT } */

        return new TextNodeLayouter(p_widget);
    } else {
        return new TextNodeLayouter();
    }
}


TextNodeLayouter.prototype = new m_nodeLayouter.NodeLayouter();
TextNodeLayouter.prototype.constructor = TextNodeLayouter;

TextNodeLayouter.prototype.layout = function() {
    var widget = this._node.map().widget(this._node);
    widget.moveTo(this._node.preferredX(), this._node.preferredY());
    widget.resize(this._node.text().length * 3, 15);
};

exports.TextNodeLayouter = TextNodeLayouter;
exports.textNodeLayouter = textNodeLayouter;
