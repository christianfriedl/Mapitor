/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

"use strict";
/* 
 * circular layouter for area
 */

var m_map = require('map.js');
var m_area = require('node/area.js');
var m_nodeLayouter = require('layouter/nodeLayouter.js');
var m_layouterFactory = require('layouter/layouterFactory.js');
var m_textNode = require('node/textNode.js');
var m_trig = require('trigonometry.js');
var m_vector = require('vector.js');
var m_areaWidget = require('widget/areaWidget.js');

function AreaLayouter(/* m_areaWidget.AreaWidget */ p_widget) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_areaWidget.AreaWidget) ) { throw new Error('type error: param p_widget should be of type m_areaWidget.AreaWidget'); }
        /* @DEVELOPMENT } */
        m_nodeLayouter.NodeLayouter.call(this, p_widget);
        this._seenNodes = [];
        this._seenArrowNodes = [];
        this._radius = 90;
        this._radiusDifference = 90;
    }
}

function areaLayouter(/* m_areaWidget.AreaWidget */ p_widget) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_widget; if ( !(PARAM instanceof m_areaWidget.AreaWidget) ) { throw new Error('type error: param p_widget should be of type m_areaWidget.AreaWidget'); }
        /* @DEVELOPMENT } */
        return new AreaLayouter(p_widget);
    } else {
        return new AreaLayouter();
    }
}


AreaLayouter.prototype = new m_nodeLayouter.NodeLayouter();
AreaLayouter.prototype.constructor = AreaLayouter;

AreaLayouter.prototype.layout = function() {
    var map = this._node.map();
    _(this._node.nodes()).each(function(n) {
        map.layouter(n).layout();
    });


    var centeredNode = this._node.map().centeredNode();
    var centerCoords = m_vector.vector(this._widget.x2(), this._widget.y2()).add(m_vector.vector(this._widget.x(), this._widget.y())).scalarMultiply(0.5);
    console.log('centercoords', centerCoords, 'thiswidget', this._widget);
    this._node.map().widget(centeredNode).moveTo(centerCoords.x, centerCoords.y);
    this._seenNodes = [ centeredNode ];
    var radius = this._layoutConnectedNodes(centeredNode, this._radius, this._radiusDifference, 0, 360);
    this._seenArrowNodes = [ centeredNode ];
    this._layoutArrows(centeredNode);
    this._layoutUnseenNodes(radius);
    this._layoutLeftoverArrows();
};

/* number */ AreaLayouter.prototype._layoutConnectedNodes = function(/* m_node.Node */ p_node, /* number */ p_radius, /* number */ p_radiusDifference, /* number */ p_segmentStart, /* number */ p_segmentEnd) {
    var targetNodes = this.collectTargetNodes(p_node, this._seenNodes);
    var angle = p_segmentStart;
    var segment = p_segmentEnd - p_segmentStart;
    var angleDiff = Math.round(segment / targetNodes.length);
    var rv_radius = p_radius + p_radiusDifference;
    var centeredWidget = this._node.map().widget(this._node.map().centeredNode());
    _(targetNodes).each(function(node) {
        var coords = m_trig.coordsOnCircle(centeredWidget.x(), centeredWidget.y(), p_radius, angle);

        var widget = this._node.map().widget(node);
        widget.x(Math.round(coords.x));
        widget.y(Math.round(coords.y));
        console.log('arealayouter _layoutConnectedNodes widget now', widget, 'coords', coords, 'centeredWidget', centeredWidget);

        rv_radius = this._layoutConnectedNodes(node, p_radius + p_radiusDifference, p_radiusDifference, angle - angleDiff / 2, angle + angleDiff / 2);

        angle += angleDiff;
    }.bind(this));
    return rv_radius;
};

AreaLayouter.prototype._layoutUnseenNodes = function(/* number */ p_radius) {
    var nodes = this._collectUnseenNodes(this._node, this._seenNodes);
    var angle = 0;
    var angleDiff = Math.round(360 / nodes.length);
    var centeredWidget = this._node.map().widget(this._node.map().centeredNode());
    _(nodes).each(function(node) {
        var coords = m_trig.coordsOnCircle(centeredWidget.x(), centeredWidget.y(), p_radius, angle);

        var widget = this._node.map().widget(node);
        widget.x(Math.round(coords.x));
        widget.y(Math.round(coords.y));

        angle += angleDiff;
    }.bind(this));
};

AreaLayouter.prototype._collectUnseenNodes = function(/* m_node.Node */ p_node, /* array(m_node.Node) */ p_seenNodes) {
    return _(p_node.nodes()).select(function(n) {
        return !( _(p_seenNodes).contains(n) );
    }.bind(this));
};

AreaLayouter.prototype._layoutArrows = function(/* m_node.Node */ p_node) {
    var arrows = this.collectArrows(p_node, this._seenArrowNodes);
    _(arrows).each(function(a) {
        var layouter = this._node.map().layouter(a);
        layouter.layout();
        var node = null;
        if ( a.sourceNode() === p_node ) {
            node = a.targetNode();
        } else {
            node = a.sourceNode();
       }
       this._layoutArrows(node);
    }.bind(this));
};

AreaLayouter.prototype._layoutLeftoverArrows = function() {
    _(this._node.nodes()).each(function(n) {
        _(this.collectArrows(n, this._seenArrowNodes)).each(function(a) {
            var layouter = this._node.map().layouter(a);
            layouter.layout();
        }.bind(this));
    }.bind(this));
};

/*
 * TODO: extract to some static helper class; extract-away common code for nodes and arrows
 */
AreaLayouter.prototype.collectTargetNodes = function(/* m_node.Node */ p_node, /* array(m_node.Node) */ p_seenNodes) {
    var targetNodes = [];
    var arrows = p_node.arrows();
    _(arrows).each(function(a) {
        var node = null;
        if ( a.sourceNode() === p_node ) {
            node = a.targetNode();
        } else {
            node = a.sourceNode();
        }
        if ( !(_(p_seenNodes).contains(node)) ) {
            targetNodes.push(node);
            p_seenNodes.push(node);
        }
    }.bind(this));
    return targetNodes;
};

AreaLayouter.prototype.collectArrows = function(/* m_node.Node */ p_node, /* array(m_node.Node) */ p_seenNodes) {
    var targetArrows = [];
    var arrows = p_node.arrows();
    _(arrows).each(function(a) {
        var node = null;
        if ( a.sourceNode() === p_node ) {
            node = a.targetNode();
        } else {
            node = a.sourceNode();
       }
        if ( !(_(p_seenNodes).contains(a)) ) {
            targetArrows.push(a);
            p_seenNodes.push(a);
        }
    }.bind(this));
    return targetArrows;
};

exports.AreaLayouter = AreaLayouter;
exports.areaLayouter = areaLayouter;
