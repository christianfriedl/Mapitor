/*
 * Copyright (C) 2015 Christian Friedl <Mag.Christian.Friedl@gmail.com>
 *
 * This file is part of Mapitor.
 *
 * Mapitor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public Licens
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-
 *
 */

"use strict";

var m_map = require('map.js');
var m_area = require('node/area.js');
var m_nodeLayouter = require('layouter/nodeLayouter.js');
var m_layouterFactory = require('layouter/layouterFactory.js');
var m_painterFactory = require('painter/painterFactory.js');
var m_textNode = require('node/textNode.js');

function AreaLayouter(/* m_area.Area */ p_node) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_area.Area) ) { throw new Error('type error: param p_map should be of type m_area.Area'); }
        /* @DEVELOPMENT } */
        m_nodeLayouter.NodeLayouter.call(this, p_node);
        this._maxCols = 5;
        this._maxRows = 5;
    }
}

function areaLayouter(/* m_area.Area */ p_node) {
    if ( arguments.length > 0 ) {
        /* @DEVELOPMENT { */
            var LEN = 1; if ( arguments.length !== LEN ) { throw new Error('arguments length is ' + arguments.length + ', should be ' + LEN); }
            var PARAM = p_node; if ( !(PARAM instanceof m_area.Area) ) { throw new Error('type error: param p_node should be of type m_area.Area'); }
        /* @DEVELOPMENT } */
        return new AreaLayouter(p_node);
    } else {
        return new AreaLayouter();
    }
}


AreaLayouter.prototype = new m_nodeLayouter.NodeLayouter();
AreaLayouter.prototype.constructor = AreaLayouter;

AreaLayouter.prototype.layout = function() {
    var area = this._node;
    var lf = m_layouterFactory.layouterFactory(this._node.map());
    _(area.nodes()).each(function(n) {
        lf.forObject(n).layout();
    });

    var textNodes = _(area.nodes()).select(function(n) {
        return (n instanceof m_textNode.TextNode);
    });
    
    // for start, let's assume max. 5 nodes in area
    var cols = Math.min(textNodes.length, this._maxCols);
    var rows = Math.max(1, Math.floor(textNodes.length / cols));

    var col = 0;
    var row = 0;
    var colWidth = area.width() / cols;
    var rowHeight = area.height() / rows;
    _(textNodes).each(function(n) {
        var pf = m_painterFactory.painterFactory(n.map(), window.mapitor.ui.paper());
        var bBox = pf.forObject(n).bBox();
        n.x(col * colWidth + colWidth/2);
        n.y(row * rowHeight + rowHeight/2);
        ++col;
        if ( col % cols === 0 ) {
            col = 0;
            ++row;
        }
    });

};

exports.AreaLayouter = AreaLayouter;
exports.areaLayouter = areaLayouter;
